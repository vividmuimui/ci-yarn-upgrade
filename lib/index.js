"use strict";

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require("lodash");

var _commander = require("commander");

var _safe = require("colors/safe");

var _safe2 = _interopRequireDefault(_safe);

var _package = require("../package.json");

var _package2 = _interopRequireDefault(_package);

var _upgradeRequest = require("./upgrade-request");

var _upgradeRequest2 = _interopRequireDefault(_upgradeRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let cmd = new _commander.Command(_package2.default.name);
let defaultPrefix = "yarn-upgrade/";
cmd.version(_package2.default.version).description(_package2.default.description).option("-n, --username <username>", "specify the commit auther name. You may set GIT_USER_NAME to environment variable.", process.env.GIT_USER_NAME).option("-e, --useremail <useremail>", "specify the commit auther email. You may set GIT_USER_EMAIL to environment variable.", process.env.GIT_USER_EMAIL).option("-t, --token <token>", "specify personal access token for GitHub. use only for debugging purpose. You should set GITHUB_ACCESS_TOKEN to environment variable.", process.env.GITHUB_ACCESS_TOKEN).option("--execute", "if you don't specify this option, allows you to test this application.", false).option("-L, --latest", "if you specify this option, upgrades packages ignores the version range specified in package.json", false).option("-v, --verbose", `shows details about the running ${_package2.default.name}`, false).option("-k, --keep", "if you specify this option, keep working branch after all.", false).option("--prefix <prefix>", `specify working branch prefix. default prefix is "${defaultPrefix}"`, defaultPrefix).option("--workingdir <path>", `specify project root dir. it contains package.json. default path is ${process.cwd()}`, process.cwd()).option("--with-shadows", "if you specify this option, shows shadow dependencies changes.", false).parse(process.argv);

/* eslint-disable no-console */
if (cmd.username && cmd.useremail && cmd.token) {
    cmd.now = (0, _moment2.default)().format("YYYYMMDDhhmmss");
    cmd.logger = cmd.verbose ? m => console.log(`> ${m}`) : () => {};
    Promise.all([(0, _upgradeRequest2.default)(cmd)]).then(([msg]) => {
        msg && console.log(msg);
        cmd.logger("All done!!");
    }).catch(err => {
        if ((0, _lodash.isString)(err)) {
            console.log(err);
        } else {
            console.error(err);
            process.exit(1);
        }
    });
} else {
    console.log(_safe2.default.red("Please set required parameters: username, useremail, token"));
    cmd.help();
}
/* eslint-enable no-console */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjbWQiLCJDb21tYW5kIiwicGtnIiwibmFtZSIsImRlZmF1bHRQcmVmaXgiLCJ2ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCJvcHRpb24iLCJwcm9jZXNzIiwiZW52IiwiR0lUX1VTRVJfTkFNRSIsIkdJVF9VU0VSX0VNQUlMIiwiR0lUSFVCX0FDQ0VTU19UT0tFTiIsImN3ZCIsInBhcnNlIiwiYXJndiIsInVzZXJuYW1lIiwidXNlcmVtYWlsIiwidG9rZW4iLCJub3ciLCJmb3JtYXQiLCJsb2dnZXIiLCJ2ZXJib3NlIiwibSIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsIm1zZyIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJleGl0IiwiY29sb3JzIiwicmVkIiwiaGVscCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBSUEsTUFBTSxJQUFJQyxrQkFBSixDQUFZQyxrQkFBSUMsSUFBaEIsQ0FBVjtBQUNBLElBQUlDLGdCQUFnQixlQUFwQjtBQUNBSixJQUFJSyxPQUFKLENBQVlILGtCQUFJRyxPQUFoQixFQUNLQyxXQURMLENBQ2lCSixrQkFBSUksV0FEckIsRUFFS0MsTUFGTCxDQUVZLDJCQUZaLEVBRXlDLG9GQUZ6QyxFQUUrSEMsUUFBUUMsR0FBUixDQUFZQyxhQUYzSSxFQUdLSCxNQUhMLENBR1ksNkJBSFosRUFHMkMsc0ZBSDNDLEVBR21JQyxRQUFRQyxHQUFSLENBQVlFLGNBSC9JLEVBSUtKLE1BSkwsQ0FJWSxxQkFKWixFQUltQyx1SUFKbkMsRUFJNEtDLFFBQVFDLEdBQVIsQ0FBWUcsbUJBSnhMLEVBS0tMLE1BTEwsQ0FLWSxXQUxaLEVBS3lCLHdFQUx6QixFQUttRyxLQUxuRyxFQU1LQSxNQU5MLENBTVksY0FOWixFQU00QixtR0FONUIsRUFNaUksS0FOakksRUFPS0EsTUFQTCxDQU9ZLGVBUFosRUFPOEIsbUNBQWtDTCxrQkFBSUMsSUFBSyxFQVB6RSxFQU80RSxLQVA1RSxFQVFLSSxNQVJMLENBUVksWUFSWixFQVEwQiw0REFSMUIsRUFRd0YsS0FSeEYsRUFTS0EsTUFUTCxDQVNZLG1CQVRaLEVBU2tDLHFEQUFvREgsYUFBYyxHQVRwRyxFQVN3R0EsYUFUeEcsRUFVS0csTUFWTCxDQVVZLHFCQVZaLEVBVW9DLHVFQUFzRUMsUUFBUUssR0FBUixFQUFjLEVBVnhILEVBVTJITCxRQUFRSyxHQUFSLEVBVjNILEVBV0tOLE1BWEwsQ0FXWSxnQkFYWixFQVc4QixnRUFYOUIsRUFXZ0csS0FYaEcsRUFZS08sS0FaTCxDQVlXTixRQUFRTyxJQVpuQjs7QUFjQTtBQUNBLElBQUlmLElBQUlnQixRQUFKLElBQWdCaEIsSUFBSWlCLFNBQXBCLElBQWlDakIsSUFBSWtCLEtBQXpDLEVBQWdEO0FBQzVDbEIsUUFBSW1CLEdBQUosR0FBVSx3QkFBU0MsTUFBVCxDQUFnQixnQkFBaEIsQ0FBVjtBQUNBcEIsUUFBSXFCLE1BQUosR0FBYXJCLElBQUlzQixPQUFKLEdBQWNDLEtBQUtDLFFBQVFDLEdBQVIsQ0FBYSxLQUFJRixDQUFFLEVBQW5CLENBQW5CLEdBQTJDLE1BQU0sQ0FBRyxDQUFqRTtBQUNBRyxZQUFRQyxHQUFSLENBQVksQ0FBQyw4QkFBRzNCLEdBQUgsQ0FBRCxDQUFaLEVBQ0s0QixJQURMLENBQ1UsQ0FBQyxDQUFDQyxHQUFELENBQUQsS0FBVztBQUNiQSxlQUFPTCxRQUFRQyxHQUFSLENBQVlJLEdBQVosQ0FBUDtBQUNBN0IsWUFBSXFCLE1BQUosQ0FBVyxZQUFYO0FBQ0gsS0FKTCxFQUtLUyxLQUxMLENBS1lDLEdBQUQsSUFBUztBQUNaLFlBQUksc0JBQVNBLEdBQVQsQ0FBSixFQUFtQjtBQUNmUCxvQkFBUUMsR0FBUixDQUFZTSxHQUFaO0FBQ0gsU0FGRCxNQUVPO0FBQ0hQLG9CQUFRUSxLQUFSLENBQWNELEdBQWQ7QUFDQXZCLG9CQUFReUIsSUFBUixDQUFhLENBQWI7QUFDSDtBQUNKLEtBWkw7QUFhSCxDQWhCRCxNQWdCTztBQUNIVCxZQUFRQyxHQUFSLENBQVlTLGVBQU9DLEdBQVAsQ0FBVyw0REFBWCxDQUFaO0FBQ0FuQyxRQUFJb0MsSUFBSjtBQUNIO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJjb21tYW5kZXJcIjtcbmltcG9ydCBjb2xvcnMgZnJvbSBcImNvbG9ycy9zYWZlXCI7XG5cbmltcG9ydCBwa2cgZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHVyIGZyb20gXCIuL3VwZ3JhZGUtcmVxdWVzdFwiO1xuXG5sZXQgY21kID0gbmV3IENvbW1hbmQocGtnLm5hbWUpO1xubGV0IGRlZmF1bHRQcmVmaXggPSBcInlhcm4tdXBncmFkZS9cIjtcbmNtZC52ZXJzaW9uKHBrZy52ZXJzaW9uKVxuICAgIC5kZXNjcmlwdGlvbihwa2cuZGVzY3JpcHRpb24pXG4gICAgLm9wdGlvbihcIi1uLCAtLXVzZXJuYW1lIDx1c2VybmFtZT5cIiwgXCJzcGVjaWZ5IHRoZSBjb21taXQgYXV0aGVyIG5hbWUuIFlvdSBtYXkgc2V0IEdJVF9VU0VSX05BTUUgdG8gZW52aXJvbm1lbnQgdmFyaWFibGUuXCIsIHByb2Nlc3MuZW52LkdJVF9VU0VSX05BTUUpXG4gICAgLm9wdGlvbihcIi1lLCAtLXVzZXJlbWFpbCA8dXNlcmVtYWlsPlwiLCBcInNwZWNpZnkgdGhlIGNvbW1pdCBhdXRoZXIgZW1haWwuIFlvdSBtYXkgc2V0IEdJVF9VU0VSX0VNQUlMIHRvIGVudmlyb25tZW50IHZhcmlhYmxlLlwiLCBwcm9jZXNzLmVudi5HSVRfVVNFUl9FTUFJTClcbiAgICAub3B0aW9uKFwiLXQsIC0tdG9rZW4gPHRva2VuPlwiLCBcInNwZWNpZnkgcGVyc29uYWwgYWNjZXNzIHRva2VuIGZvciBHaXRIdWIuIHVzZSBvbmx5IGZvciBkZWJ1Z2dpbmcgcHVycG9zZS4gWW91IHNob3VsZCBzZXQgR0lUSFVCX0FDQ0VTU19UT0tFTiB0byBlbnZpcm9ubWVudCB2YXJpYWJsZS5cIiwgcHJvY2Vzcy5lbnYuR0lUSFVCX0FDQ0VTU19UT0tFTilcbiAgICAub3B0aW9uKFwiLS1leGVjdXRlXCIsIFwiaWYgeW91IGRvbid0IHNwZWNpZnkgdGhpcyBvcHRpb24sIGFsbG93cyB5b3UgdG8gdGVzdCB0aGlzIGFwcGxpY2F0aW9uLlwiLCBmYWxzZSlcbiAgICAub3B0aW9uKFwiLUwsIC0tbGF0ZXN0XCIsIFwiaWYgeW91IHNwZWNpZnkgdGhpcyBvcHRpb24sIHVwZ3JhZGVzIHBhY2thZ2VzIGlnbm9yZXMgdGhlIHZlcnNpb24gcmFuZ2Ugc3BlY2lmaWVkIGluIHBhY2thZ2UuanNvblwiLCBmYWxzZSlcbiAgICAub3B0aW9uKFwiLXYsIC0tdmVyYm9zZVwiLCBgc2hvd3MgZGV0YWlscyBhYm91dCB0aGUgcnVubmluZyAke3BrZy5uYW1lfWAsIGZhbHNlKVxuICAgIC5vcHRpb24oXCItaywgLS1rZWVwXCIsIFwiaWYgeW91IHNwZWNpZnkgdGhpcyBvcHRpb24sIGtlZXAgd29ya2luZyBicmFuY2ggYWZ0ZXIgYWxsLlwiLCBmYWxzZSlcbiAgICAub3B0aW9uKFwiLS1wcmVmaXggPHByZWZpeD5cIiwgYHNwZWNpZnkgd29ya2luZyBicmFuY2ggcHJlZml4LiBkZWZhdWx0IHByZWZpeCBpcyBcIiR7ZGVmYXVsdFByZWZpeH1cImAsIGRlZmF1bHRQcmVmaXgpXG4gICAgLm9wdGlvbihcIi0td29ya2luZ2RpciA8cGF0aD5cIiwgYHNwZWNpZnkgcHJvamVjdCByb290IGRpci4gaXQgY29udGFpbnMgcGFja2FnZS5qc29uLiBkZWZhdWx0IHBhdGggaXMgJHtwcm9jZXNzLmN3ZCgpfWAsIHByb2Nlc3MuY3dkKCkpXG4gICAgLm9wdGlvbihcIi0td2l0aC1zaGFkb3dzXCIsIFwiaWYgeW91IHNwZWNpZnkgdGhpcyBvcHRpb24sIHNob3dzIHNoYWRvdyBkZXBlbmRlbmNpZXMgY2hhbmdlcy5cIiwgZmFsc2UpXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmlmIChjbWQudXNlcm5hbWUgJiYgY21kLnVzZXJlbWFpbCAmJiBjbWQudG9rZW4pIHtcbiAgICBjbWQubm93ID0gbW9tZW50KCkuZm9ybWF0KFwiWVlZWU1NRERoaG1tc3NcIik7XG4gICAgY21kLmxvZ2dlciA9IGNtZC52ZXJib3NlID8gbSA9PiBjb25zb2xlLmxvZyhgPiAke219YCkgOiAoKSA9PiB7IH07XG4gICAgUHJvbWlzZS5hbGwoW3VyKGNtZCldKVxuICAgICAgICAudGhlbigoW21zZ10pID0+IHtcbiAgICAgICAgICAgIG1zZyAmJiBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgY21kLmxvZ2dlcihcIkFsbCBkb25lISFcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcoZXJyKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhjb2xvcnMucmVkKFwiUGxlYXNlIHNldCByZXF1aXJlZCBwYXJhbWV0ZXJzOiB1c2VybmFtZSwgdXNlcmVtYWlsLCB0b2tlblwiKSk7XG4gICAgY21kLmhlbHAoKTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuIl19