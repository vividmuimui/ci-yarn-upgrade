"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.__test__ = undefined;

exports.default = function (options) {
    let LOG = options.logger;
    let yarnpkg = new _yarnpkg2.default(options.workingdir, LOG);
    let git = new _git2.default(options.workingdir, LOG);
    return yarnpkg.install().then(() => yarnpkg.outdated()).then(out => findOutdatedDeps(LOG, out)).then(([diff, hex]) => git.fetch("origin").then(() => [diff, hex])).then(([diff, hex]) => git.branchList().then(names => [names, diff, hex])).then(([names, diff, hex]) => findExistingBranch(LOG, options, names, diff, hex)).then(([newBranch, diff]) => git.checkoutWith(newBranch).then(() => diff)).then(diff => collectModuleVersions(options).then(mv => [mv, diff])).then(([mv, diff]) => yarnpkg.upgrade(options.latest).then(out => computeUpdatedDependencies(LOG, options, diff, mv, out))).then(diff => git.setup(options.username, options.useremail).then(() => [diff, options])).then(([diff, options]) => addTargetFiles(LOG, options, git).then(() => diff)).then(diff => git.commit("update dependencies").then(() => diff)).then(diff => git.currentBranch().then(newBranch => [newBranch, diff])).then(([newBranch, diff]) => git.checkout("-").then(() => [newBranch, diff])).then(([newBranch, diff]) => git.currentBranch().then(baseBranch => [baseBranch, newBranch, diff])).then(([baseBranch, newBranch, diff]) => selectPushPromise(LOG, options, git, "origin", newBranch).then(() => [baseBranch, newBranch, diff])).then(([baseBranch, newBranch, diff]) => git.remoteurl("origin").then(remote => [new _github2.default(options, remote), baseBranch, newBranch, diff])).then(([github, baseBranch, newBranch, diff]) => github.pullRequest(baseBranch, newBranch, diff).then(report => [report, newBranch])).then(([report, newBranch]) => selectDeletePromise(LOG, options, git, newBranch, report));
};

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _sha = require("sha.js");

var _sha2 = _interopRequireDefault(_sha);

var _fs = require("mz/fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _gitUrlParse = require("git-url-parse");

var _gitUrlParse2 = _interopRequireDefault(_gitUrlParse);

var _yarnpkg = require("./yarnpkg");

var _yarnpkg2 = _interopRequireDefault(_yarnpkg);

var _git = require("./git");

var _git2 = _interopRequireDefault(_git);

var _github = require("./github");

var _github2 = _interopRequireDefault(_github);

var _readPackageJson = require("./promise/read-package-json");

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findOutdatedDeps(LOG, out) {
    LOG("Find some outdated dependencies.");
    LOG(`all of output ${out}`);
    let json = _lodash2.default.last(out.split(/\r?\n/)); // skip Color legend
    LOG(`difference table ${json}`);
    if (json) {
        let diff = JSON.parse(json).data.body;
        if (diff && diff.some(v => v[1] !== v[2])) {
            LOG("Found outdated dependencies.");
            let hex = new _sha2.default.sha1().update(json, "utf8").digest("hex");
            return [diff, hex];
        }
    }
    LOG("Did not find outdated dependencies.");
    return Promise.reject("dependencies are up to date.");
}

function collectModuleVersions(options) {
    if (options.withShadows) {
        let modules = _path2.default.join(options.workingdir, "node_modules");
        return _fs2.default.readdir(modules).then(files => {
            let ps = files.map(n => _path2.default.join(modules, n)).map(n => [n, _fs2.default.statSync(n)]).filter(v => v[1].isDirectory()).map(v => _path2.default.join(v[0], "package.json")).map(n => [n, _fs2.default.existsSync(n)]).filter(v => v[1]).map(v => (0, _readPackageJson2.default)(v[0]));
            return Promise.all(ps).then(pkgs => {
                return new Map(pkgs.map(pkg => [pkg.name, pkg.version]));
            });
        });
    }
    return Promise.resolve(new Map());
}

function computeUpdatedDependencies(LOG, options, diff, mv, out) {
    LOG("compute shadow dependencies");
    if (options.withShadows) {
        let msgs = out.split(/[\r]?\n/);
        let tree = JSON.parse(msgs[msgs.length - 1]);

        let names = new Set(diff.map(d => d[0]));
        let shadows = tree.data.trees.map(v => v.name.split(/@/)).filter(([name, version]) => {
            let cur = mv.get(name);
            return cur ? cur !== version : true;
        }).map(([name, version]) => {
            let cur = mv.get(name);
            return [name, cur || version, version, undefined, "shadow"];
        }).filter(v => names.has(v[0]) === false);
        return diff.concat(shadows.sort((left, right) => {
            return left[0].localeCompare(right[0]);
        }));
    }
    return diff;
}

function findExistingBranch(LOG, options, names, diff, hex) {
    LOG("Find existing branch.");
    let newBranch = `${options.prefix}${options.now}/${hex}`;
    let found = names.find(n => n.endsWith(hex));
    if (found) {
        LOG(`Found existing branch ${found}`);
        return Promise.reject("Working Branch is already exists.");
    }
    return [newBranch, diff];
}

function addTargetFiles(LOG, options, git) {
    if (options.latest) {
        LOG("Added package.json into request files because --latest is specified.");
        git.add("package.json");
    }

    return git.add("yarn.lock");
}

function selectPushPromise(LOG, options, git, remote, branch) {
    if (options.execute) {
        let remoteName = "github-url-with-token";
        return git.remoteurl(remote).then(remoteUrl => (0, _gitUrlParse2.default)(remoteUrl)).then(url => `https://${options.token}:x-oauth-basic@${url.source}${url.pathname}`) // https://<token>:x-oauth-basic@github.com/owner/repo.git
        .then(urlWithToken => git.addRemote(remoteName, urlWithToken)).then(() => git.push(remoteName, branch)).then(() => git.removeRemote(remoteName));
    }
    LOG("`git push` is skipped because --execute is not specified.");
    return Promise.resolve();
}

function selectDeletePromise(LOG, options, git, branch, report) {
    let p;
    if (options.keep) {
        LOG("Working branch is kept.");
        p = Promise.resolve();
    } else {
        LOG("Delete working branch because --keep is not specified.");
        p = git.deleteBranch(branch);
    }
    return p.then(() => report);
}

// for tesing purpose
const __test__ = exports.__test__ = [findOutdatedDeps, findExistingBranch, addTargetFiles, selectPushPromise, selectDeletePromise];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91cGdyYWRlLXJlcXVlc3QuanMiXSwibmFtZXMiOlsib3B0aW9ucyIsIkxPRyIsImxvZ2dlciIsInlhcm5wa2ciLCJZYXJucGtnIiwid29ya2luZ2RpciIsImdpdCIsIkdpdCIsImluc3RhbGwiLCJ0aGVuIiwib3V0ZGF0ZWQiLCJvdXQiLCJmaW5kT3V0ZGF0ZWREZXBzIiwiZGlmZiIsImhleCIsImZldGNoIiwiYnJhbmNoTGlzdCIsIm5hbWVzIiwiZmluZEV4aXN0aW5nQnJhbmNoIiwibmV3QnJhbmNoIiwiY2hlY2tvdXRXaXRoIiwiY29sbGVjdE1vZHVsZVZlcnNpb25zIiwibXYiLCJ1cGdyYWRlIiwibGF0ZXN0IiwiY29tcHV0ZVVwZGF0ZWREZXBlbmRlbmNpZXMiLCJzZXR1cCIsInVzZXJuYW1lIiwidXNlcmVtYWlsIiwiYWRkVGFyZ2V0RmlsZXMiLCJjb21taXQiLCJjdXJyZW50QnJhbmNoIiwiY2hlY2tvdXQiLCJiYXNlQnJhbmNoIiwic2VsZWN0UHVzaFByb21pc2UiLCJyZW1vdGV1cmwiLCJyZW1vdGUiLCJHaXRIdWIiLCJnaXRodWIiLCJwdWxsUmVxdWVzdCIsInJlcG9ydCIsInNlbGVjdERlbGV0ZVByb21pc2UiLCJqc29uIiwiXyIsImxhc3QiLCJzcGxpdCIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJib2R5Iiwic29tZSIsInYiLCJoYXNoIiwic2hhMSIsInVwZGF0ZSIsImRpZ2VzdCIsIlByb21pc2UiLCJyZWplY3QiLCJ3aXRoU2hhZG93cyIsIm1vZHVsZXMiLCJwYXRoIiwiam9pbiIsImZzIiwicmVhZGRpciIsImZpbGVzIiwicHMiLCJtYXAiLCJuIiwic3RhdFN5bmMiLCJmaWx0ZXIiLCJpc0RpcmVjdG9yeSIsImV4aXN0c1N5bmMiLCJhbGwiLCJwa2dzIiwiTWFwIiwicGtnIiwibmFtZSIsInZlcnNpb24iLCJyZXNvbHZlIiwibXNncyIsInRyZWUiLCJsZW5ndGgiLCJTZXQiLCJkIiwic2hhZG93cyIsInRyZWVzIiwiY3VyIiwiZ2V0IiwidW5kZWZpbmVkIiwiaGFzIiwiY29uY2F0Iiwic29ydCIsImxlZnQiLCJyaWdodCIsImxvY2FsZUNvbXBhcmUiLCJwcmVmaXgiLCJub3ciLCJmb3VuZCIsImZpbmQiLCJlbmRzV2l0aCIsImFkZCIsImJyYW5jaCIsImV4ZWN1dGUiLCJyZW1vdGVOYW1lIiwicmVtb3RlVXJsIiwidXJsIiwidG9rZW4iLCJzb3VyY2UiLCJwYXRobmFtZSIsInVybFdpdGhUb2tlbiIsImFkZFJlbW90ZSIsInB1c2giLCJyZW1vdmVSZW1vdGUiLCJwIiwia2VlcCIsImRlbGV0ZUJyYW5jaCIsIl9fdGVzdF9fIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O2tCQTBIZSxVQUFVQSxPQUFWLEVBQW1CO0FBQzlCLFFBQUlDLE1BQU1ELFFBQVFFLE1BQWxCO0FBQ0EsUUFBSUMsVUFBVSxJQUFJQyxpQkFBSixDQUFZSixRQUFRSyxVQUFwQixFQUFnQ0osR0FBaEMsQ0FBZDtBQUNBLFFBQUlLLE1BQU0sSUFBSUMsYUFBSixDQUFRUCxRQUFRSyxVQUFoQixFQUE0QkosR0FBNUIsQ0FBVjtBQUNBLFdBQU9FLFFBQVFLLE9BQVIsR0FDRkMsSUFERSxDQUNHLE1BQU1OLFFBQVFPLFFBQVIsRUFEVCxFQUVGRCxJQUZFLENBRUdFLE9BQU9DLGlCQUFpQlgsR0FBakIsRUFBc0JVLEdBQXRCLENBRlYsRUFHRkYsSUFIRSxDQUdHLENBQUMsQ0FBQ0ksSUFBRCxFQUFPQyxHQUFQLENBQUQsS0FBaUJSLElBQUlTLEtBQUosQ0FBVSxRQUFWLEVBQW9CTixJQUFwQixDQUF5QixNQUFNLENBQUNJLElBQUQsRUFBT0MsR0FBUCxDQUEvQixDQUhwQixFQUlGTCxJQUpFLENBSUcsQ0FBQyxDQUFDSSxJQUFELEVBQU9DLEdBQVAsQ0FBRCxLQUFpQlIsSUFBSVUsVUFBSixHQUFpQlAsSUFBakIsQ0FBc0JRLFNBQVMsQ0FBQ0EsS0FBRCxFQUFRSixJQUFSLEVBQWNDLEdBQWQsQ0FBL0IsQ0FKcEIsRUFLRkwsSUFMRSxDQUtHLENBQUMsQ0FBQ1EsS0FB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QixTQUFKLENBQWNDLE1BQWQsRUFDRjNCLElBREUsQ0FDRytGLGFBQWEsMkJBQU9BLFNBQVAsQ0FEaEIsRUFFRi9GLElBRkUsQ0FFR2dHLE9BQVEsV0FBVXpHLFFBQVEwRyxLQUFNLGtCQUFpQkQsSUFBSUUsTUFBTyxHQUFFRixJQUFJRyxRQUFTLEVBRjlFLEVBRWlGO0FBRmpGLFNBR0ZuRyxJQUhFLENBR0dvRyxnQkFBZ0J2RyxJQUFJd0csU0FBSixDQUFjUCxVQUFkLEVBQTBCTSxZQUExQixDQUhuQixFQUlGcEcsSUFKRSxDQUlHLE1BQU1ILElBQUl5RyxJQUFKLENBQVNSLFVBQVQsRUFBcUJGLE1BQXJCLENBSlQsRUFLRjVGLElBTEUsQ0FLRyxNQUFNSCxJQUFJMEcsWUFBSixDQUFpQlQsVUFBakIsQ0FMVCxDQUFQO0FBTUg7QUFDRHRHLFFBQUksMkRBQUo7QUFDQSxXQUFPdUQsUUFBUXNCLE9BQVIsRUFBUDtBQUNIOztBQUVELFNBQVNyQyxtQkFBVCxDQUE2QnhDLEdBQTdCLEVBQWtDRCxPQUFsQyxFQUEyQ00sR0FBM0MsRUFBZ0QrRixNQUFoRCxFQUF3RDdELE1BQXhELEVBQWdFO0FBQzVELFFBQUl5RSxDQUFKO0FBQ0EsUUFBSWpILFFBQVFrSCxJQUFaLEVBQWtCO0FBQ2RqSCxZQUFJLHlCQUFKO0FBQ0FnSCxZQUFJekQsUUFBUXNCLE9BQVIsRUFBSjtBQUNILEtBSEQsTUFHTztBQUNIN0UsWUFBSSx3REFBSjtBQUNBZ0gsWUFBSTNHLElBQUk2RyxZQUFKLENBQWlCZCxNQUFqQixDQUFKO0FBQ0g7QUFDRCxXQUFPWSxFQUFFeEcsSUFBRixDQUFPLE1BQU0rQixNQUFiLENBQVA7QUFDSDs7QUFFRDtBQUNPLE1BQU00RSw4QkFBVyxDQUFDeEcsZ0JBQUQsRUFBbUJNLGtCQUFuQixFQUF1Q1csY0FBdkMsRUFBdURLLGlCQUF2RCxFQUEwRU8sbUJBQTFFLENBQWpCIiwiZmlsZSI6InVwZ3JhZGUtcmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCBoYXNoIGZyb20gXCJzaGEuanNcIjtcbmltcG9ydCBmcyBmcm9tIFwibXovZnNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgZ2l0dXJsIGZyb20gXCJnaXQtdXJsLXBhcnNlXCI7XG5cbmltcG9ydCBZYXJucGtnIGZyb20gXCIuL3lhcm5wa2dcIjtcbmltcG9ydCBHaXQgZnJvbSBcIi4vZ2l0XCI7XG5pbXBvcnQgR2l0SHViIGZyb20gXCIuL2dpdGh1YlwiO1xuaW1wb3J0IHJwaiBmcm9tIFwiLi9wcm9taXNlL3JlYWQtcGFja2FnZS1qc29uXCI7XG5cbmZ1bmN0aW9uIGZpbmRPdXRkYXRlZERlcHMoTE9HLCBvdXQpIHtcbiAgICBMT0coXCJGaW5kIHNvbWUgb3V0ZGF0ZWQgZGVwZW5kZW5jaWVzLlwiKTtcbiAgICBMT0coYGFsbCBvZiBvdXRwdXQgJHtvdXR9YCk7XG4gICAgbGV0IGpzb24gPSBfLmxhc3Qob3V0LnNwbGl0KC9cXHI/XFxuLykpOyAvLyBza2lwIENvbG9yIGxlZ2VuZFxuICAgIExPRyhgZGlmZmVyZW5jZSB0YWJsZSAke2pzb259YCk7XG4gICAgaWYgKGpzb24pIHtcbiAgICAgICAgbGV0IGRpZmYgPSBKU09OLnBhcnNlKGpzb24pLmRhdGEuYm9keTtcbiAgICAgICAgaWYgKGRpZmYgJiYgZGlmZi5zb21lKHYgPT4gdlsxXSAhPT0gdlsyXSkpIHtcbiAgICAgICAgICAgIExPRyhcIkZvdW5kIG91dGRhdGVkIGRlcGVuZGVuY2llcy5cIik7XG4gICAgICAgICAgICBsZXQgaGV4ID0gbmV3IGhhc2guc2hhMSgpLnVwZGF0ZShqc29uLCBcInV0ZjhcIikuZGlnZXN0KFwiaGV4XCIpO1xuICAgICAgICAgICAgcmV0dXJuIFtkaWZmLCBoZXhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIExPRyhcIkRpZCBub3QgZmluZCBvdXRkYXRlZCBkZXBlbmRlbmNpZXMuXCIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcImRlcGVuZGVuY2llcyBhcmUgdXAgdG8gZGF0ZS5cIik7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RNb2R1bGVWZXJzaW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMud2l0aFNoYWRvd3MpIHtcbiAgICAgICAgbGV0IG1vZHVsZXMgPSBwYXRoLmpvaW4ob3B0aW9ucy53b3JraW5nZGlyLCBcIm5vZGVfbW9kdWxlc1wiKTtcbiAgICAgICAgcmV0dXJuIGZzLnJlYWRkaXIobW9kdWxlcykudGhlbihmaWxlcyA9PiB7XG4gICAgICAgICAgICBsZXQgcHMgPSBmaWxlc1xuICAgICAgICAgICAgICAgIC5tYXAobiA9PiBwYXRoLmpvaW4obW9kdWxlcywgbikpXG4gICAgICAgICAgICAgICAgLm1hcChuID0+IFtuLCBmcy5zdGF0U3luYyhuKV0pXG4gICAgICAgICAgICAgICAgLmZpbHRlcih2ID0+IHZbMV0uaXNEaXJlY3RvcnkoKSlcbiAgICAgICAgICAgICAgICAubWFwKHYgPT4gcGF0aC5qb2luKHZbMF0sIFwicGFja2FnZS5qc29uXCIpKVxuICAgICAgICAgICAgICAgIC5tYXAobiA9PiBbbiwgZnMuZXhpc3RzU3luYyhuKV0pXG4gICAgICAgICAgICAgICAgLmZpbHRlcih2ID0+IHZbMV0pXG4gICAgICAgICAgICAgICAgLm1hcCh2ID0+IHJwaih2WzBdKSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHMpLnRoZW4ocGtncyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXAocGtncy5tYXAocGtnID0+IFtwa2cubmFtZSwgcGtnLnZlcnNpb25dKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IE1hcCgpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVVwZGF0ZWREZXBlbmRlbmNpZXMoTE9HLCBvcHRpb25zLCBkaWZmLCBtdiwgb3V0KSB7XG4gICAgTE9HKFwiY29tcHV0ZSBzaGFkb3cgZGVwZW5kZW5jaWVzXCIpO1xuICAgIGlmIChvcHRpb25zLndpdGhTaGFkb3dzKSB7XG4gICAgICAgIGxldCBtc2dzID0gb3V0LnNwbGl0KC9bXFxyXT9cXG4vKTtcbiAgICAgICAgbGV0IHRyZWUgPSBKU09OLnBhcnNlKG1zZ3NbbXNncy5sZW5ndGggLSAxXSk7XG5cbiAgICAgICAgbGV0IG5hbWVzID0gbmV3IFNldChkaWZmLm1hcChkID0+IGRbMF0pKTtcbiAgICAgICAgbGV0IHNoYWRvd3MgPSB0cmVlLmRhdGEudHJlZXNcbiAgICAgICAgICAgIC5tYXAodiA9PiB2Lm5hbWUuc3BsaXQoL0AvKSlcbiAgICAgICAgICAgIC5maWx0ZXIoKFtuYW1lLCB2ZXJzaW9uXSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjdXIgPSBtdi5nZXQobmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1ciA/IGN1ciAhPT0gdmVyc2lvbiA6IHRydWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1hcCgoW25hbWUsIHZlcnNpb25dKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGN1ciA9IG12LmdldChuYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW25hbWUsIGN1ciB8fCB2ZXJzaW9uLCB2ZXJzaW9uLCB1bmRlZmluZWQsIFwic2hhZG93XCJdO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5maWx0ZXIodiA9PiBuYW1lcy5oYXModlswXSkgPT09IGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYuY29uY2F0KHNoYWRvd3Muc29ydCgobGVmdCwgcmlnaHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBsZWZ0WzBdLmxvY2FsZUNvbXBhcmUocmlnaHRbMF0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBkaWZmO1xufVxuXG5mdW5jdGlvbiBmaW5kRXhpc3RpbmdCcmFuY2goTE9HLCBvcHRpb25zLCBuYW1lcywgZGlmZiwgaGV4KSB7XG4gICAgTE9HKFwiRmluZCBleGlzdGluZyBicmFuY2guXCIpO1xuICAgIGxldCBuZXdCcmFuY2ggPSBgJHtvcHRpb25zLnByZWZpeH0ke29wdGlvbnMubm93fS8ke2hleH1gO1xuICAgIGxldCBmb3VuZCA9IG5hbWVzLmZpbmQobiA9PiBuLmVuZHNXaXRoKGhleCkpO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgICBMT0coYEZvdW5kIGV4aXN0aW5nIGJyYW5jaCAke2ZvdW5kfWApO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJXb3JraW5nIEJyYW5jaCBpcyBhbHJlYWR5IGV4aXN0cy5cIik7XG4gICAgfVxuICAgIHJldHVybiBbbmV3QnJhbmNoLCBkaWZmXTtcbn1cblxuZnVuY3Rpb24gYWRkVGFyZ2V0RmlsZXMoTE9HLCBvcHRpb25zLCBnaXQpIHtcbiAgICBpZiAob3B0aW9ucy5sYXRlc3QpIHtcbiAgICAgICAgTE9HKFwiQWRkZWQgcGFja2FnZS5qc29uIGludG8gcmVxdWVzdCBmaWxlcyBiZWNhdXNlIC0tbGF0ZXN0IGlzIHNwZWNpZmllZC5cIik7XG4gICAgICAgIGdpdC5hZGQoXCJwYWNrYWdlLmpzb25cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdpdC5hZGQoXCJ5YXJuLmxvY2tcIik7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdFB1c2hQcm9taXNlKExPRywgb3B0aW9ucywgZ2l0LCByZW1vdGUsIGJyYW5jaCkge1xuICAgIGlmIChvcHRpb25zLmV4ZWN1dGUpIHtcbiAgICAgICAgbGV0IHJlbW90ZU5hbWUgPSBcImdpdGh1Yi11cmwtd2l0aC10b2tlblwiO1xuICAgICAgICByZXR1cm4gZ2l0LnJlbW90ZXVybChyZW1vdGUpXG4gICAgICAgICAgICAudGhlbihyZW1vdGVVcmwgPT4gZ2l0dXJsKHJlbW90ZVVybCkpXG4gICAgICAgICAgICAudGhlbih1cmwgPT4gYGh0dHBzOi8vJHtvcHRpb25zLnRva2VufTp4LW9hdXRoLWJhc2ljQCR7dXJsLnNvdXJjZX0ke3VybC5wYXRobmFtZX1gKSAvLyBodHRwczovLzx0b2tlbj46eC1vYXV0aC1iYXNpY0BnaXRodWIuY29tL293bmVyL3JlcG8uZ2l0XG4gICAgICAgICAgICAudGhlbih1cmxXaXRoVG9rZW4gPT4gZ2l0LmFkZFJlbW90ZShyZW1vdGVOYW1lLCB1cmxXaXRoVG9rZW4pKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gZ2l0LnB1c2gocmVtb3RlTmFtZSwgYnJhbmNoKSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IGdpdC5yZW1vdmVSZW1vdGUocmVtb3RlTmFtZSkpO1xuICAgIH1cbiAgICBMT0coXCJgZ2l0IHB1c2hgIGlzIHNraXBwZWQgYmVjYXVzZSAtLWV4ZWN1dGUgaXMgbm90IHNwZWNpZmllZC5cIik7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3REZWxldGVQcm9taXNlKExPRywgb3B0aW9ucywgZ2l0LCBicmFuY2gsIHJlcG9ydCkge1xuICAgIGxldCBwO1xuICAgIGlmIChvcHRpb25zLmtlZXApIHtcbiAgICAgICAgTE9HKFwiV29ya2luZyBicmFuY2ggaXMga2VwdC5cIik7XG4gICAgICAgIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMT0coXCJEZWxldGUgd29ya2luZyBicmFuY2ggYmVjYXVzZSAtLWtlZXAgaXMgbm90IHNwZWNpZmllZC5cIik7XG4gICAgICAgIHAgPSBnaXQuZGVsZXRlQnJhbmNoKGJyYW5jaCk7XG4gICAgfVxuICAgIHJldHVybiBwLnRoZW4oKCkgPT4gcmVwb3J0KTtcbn1cblxuLy8gZm9yIHRlc2luZyBwdXJwb3NlXG5leHBvcnQgY29uc3QgX190ZXN0X18gPSBbZmluZE91dGRhdGVkRGVwcywgZmluZEV4aXN0aW5nQnJhbmNoLCBhZGRUYXJnZXRGaWxlcywgc2VsZWN0UHVzaFByb21pc2UsIHNlbGVjdERlbGV0ZVByb21pc2VdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGxldCBMT0cgPSBvcHRpb25zLmxvZ2dlcjtcbiAgICBsZXQgeWFybnBrZyA9IG5ldyBZYXJucGtnKG9wdGlvbnMud29ya2luZ2RpciwgTE9HKTtcbiAgICBsZXQgZ2l0ID0gbmV3IEdpdChvcHRpb25zLndvcmtpbmdkaXIsIExPRyk7XG4gICAgcmV0dXJuIHlhcm5wa2cuaW5zdGFsbCgpXG4gICAgICAgIC50aGVuKCgpID0+IHlhcm5wa2cub3V0ZGF0ZWQoKSlcbiAgICAgICAgLnRoZW4ob3V0ID0+IGZpbmRPdXRkYXRlZERlcHMoTE9HLCBvdXQpKVxuICAgICAgICAudGhlbigoW2RpZmYsIGhleF0pID0+IGdpdC5mZXRjaChcIm9yaWdpblwiKS50aGVuKCgpID0+IFtkaWZmLCBoZXhdKSlcbiAgICAgICAgLnRoZW4oKFtkaWZmLCBoZXhdKSA9PiBnaXQuYnJhbmNoTGlzdCgpLnRoZW4obmFtZXMgPT4gW25hbWVzLCBkaWZmLCBoZXhdKSlcbiAgICAgICAgLnRoZW4oKFtuYW1lcywgZGlmZiwgaGV4XSkgPT4gZmluZEV4aXN0aW5nQnJhbmNoKExPRywgb3B0aW9ucywgbmFtZXMsIGRpZmYsIGhleCkpXG4gICAgICAgIC50aGVuKChbbmV3QnJhbmNoLCBkaWZmXSkgPT4gZ2l0LmNoZWNrb3V0V2l0aChuZXdCcmFuY2gpLnRoZW4oKCkgPT4gZGlmZikpXG4gICAgICAgIC50aGVuKGRpZmYgPT4gY29sbGVjdE1vZHVsZVZlcnNpb25zKG9wdGlvbnMpLnRoZW4obXYgPT4gW212LCBkaWZmXSkpXG4gICAgICAgIC50aGVuKChbbXYsIGRpZmZdKSA9PiB5YXJucGtnLnVwZ3JhZGUob3B0aW9ucy5sYXRlc3QpLnRoZW4ob3V0ID0+IGNvbXB1dGVVcGRhdGVkRGVwZW5kZW5jaWVzKExPRywgb3B0aW9ucywgZGlmZiwgbXYsIG91dCkpKVxuICAgICAgICAudGhlbihkaWZmID0+IGdpdC5zZXR1cChvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnVzZXJlbWFpbCkudGhlbigoKSA9PiBbZGlmZiwgb3B0aW9uc10pKVxuICAgICAgICAudGhlbigoW2RpZmYsIG9wdGlvbnNdKSA9PiBhZGRUYXJnZXRGaWxlcyhMT0csIG9wdGlvbnMsIGdpdCkudGhlbigoKSA9PiBkaWZmKSlcbiAgICAgICAgLnRoZW4oZGlmZiA9PiBnaXQuY29tbWl0KFwidXBkYXRlIGRlcGVuZGVuY2llc1wiKS50aGVuKCgpID0+IGRpZmYpKVxuICAgICAgICAudGhlbihkaWZmID0+IGdpdC5jdXJyZW50QnJhbmNoKCkudGhlbihuZXdCcmFuY2ggPT4gW25ld0JyYW5jaCwgZGlmZl0pKVxuICAgICAgICAudGhlbigoW25ld0JyYW5jaCwgZGlmZl0pID0+IGdpdC5jaGVja291dChcIi1cIikudGhlbigoKSA9PiAoW25ld0JyYW5jaCwgZGlmZl0pKSlcbiAgICAgICAgLnRoZW4oKFtuZXdCcmFuY2gsIGRpZmZdKSA9PiBnaXQuY3VycmVudEJyYW5jaCgpLnRoZW4oYmFzZUJyYW5jaCA9PiBbYmFzZUJyYW5jaCwgbmV3QnJhbmNoLCBkaWZmXSkpXG4gICAgICAgIC50aGVuKChbYmFzZUJyYW5jaCwgbmV3QnJhbmNoLCBkaWZmXSkgPT5cbiAgICAgICAgICAgIHNlbGVjdFB1c2hQcm9taXNlKExPRywgb3B0aW9ucywgZ2l0LCBcIm9yaWdpblwiLCBuZXdCcmFuY2gpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gW2Jhc2VCcmFuY2gsIG5ld0JyYW5jaCwgZGlmZl0pKVxuICAgICAgICAudGhlbigoW2Jhc2VCcmFuY2gsIG5ld0JyYW5jaCwgZGlmZl0pID0+IGdpdC5yZW1vdGV1cmwoXCJvcmlnaW5cIilcbiAgICAgICAgICAgIC50aGVuKHJlbW90ZSA9PiBbbmV3IEdpdEh1YihvcHRpb25zLCByZW1vdGUpLCBiYXNlQnJhbmNoLCBuZXdCcmFuY2gsIGRpZmZdKSlcbiAgICAgICAgLnRoZW4oKFtnaXRodWIsIGJhc2VCcmFuY2gsIG5ld0JyYW5jaCwgZGlmZl0pID0+XG4gICAgICAgICAgICBnaXRodWIucHVsbFJlcXVlc3QoYmFzZUJyYW5jaCwgbmV3QnJhbmNoLCBkaWZmKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlcG9ydCA9PiBbcmVwb3J0LCBuZXdCcmFuY2hdKSlcbiAgICAgICAgLnRoZW4oKFtyZXBvcnQsIG5ld0JyYW5jaF0pID0+XG4gICAgICAgICAgICBzZWxlY3REZWxldGVQcm9taXNlKExPRywgb3B0aW9ucywgZ2l0LCBuZXdCcmFuY2gsIHJlcG9ydCkpO1xufVxuIl19